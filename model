import torch
import torch.nn as nn
import torch.nn.functional as F
import math
from dataclasses import dataclass
from typing import Optional

@dataclass
class ModelArgs:
    dim: int = 4096
    n_layers: int = 32
    n_heads: int = 32 #Number of heads for the queries
    n_kv_heads: Optional[int] = None #Can have multiple number of heads
    vocab_size: int = -1 #set with tokenizer
    multiple_of: int = 256
    ffn_dim_multiplier: Optional[float] = None #These two keep the number of parameters with grouped query attention to compare the base transformer
    norm_eps: float = 1e-5

    #needed for KV Cache:
    max_batch_size: int = 32
    max_seq_len: int = 2048

    device:str = None

class Transformer(nn.Module):
    def __init__(self,args:ModelArgs) -> None:
        super().__init__()

        assert args.vocab_size != -1, "Vocab size must be set"
        self.args = args
        self.vocab_size = args.vocab_size
        self.n_layers = args.n_layers
        self.tok_embeddings = nn.Embedding(self.vocab_size,args.dim) #need to keep the same names for when we donwload the weights

        self.layers = nn.ModuleList()
        for _ in range(args.n_layers):
            self.layers.append(EncoderBlocks(args))
        self.norm = RMSNorm(args.dim,eps = args.norm_eps) #very small so we never divide by 0
        self.output = nn.linear(args.dim,self.vocab_size,bias = False)

        #RoPE
        self.freqs_complex = precompute_thera_pos_frequencies(self.args.dim // self.args.n_heads, self.args.max_seq_len *2,device =self.args.device)


    def forward(self,tokens: torch.tensor,start_pos: int):
        # (B, seq len)
        batch_size, seq_len = tokens.shape
        assert seq_len == 1, "Only one token at a time to be processed" #only for inference

        #(B, Seq_len) -> (B,seq_len, Dim)
        h = self.tok_embeddings(tokens)

        #retrieve the pairs (m,theta) for tje correpsonding positions 
        freqs_complex = self.freqs_complex(start_pos:start_pos + seq_len )

        #consecutively apply all the encoder blocks
        for layer in self.layers:
            h = layer(h, start_pos,freqs_complex)
        h = self.norm(h)
        output = self.output(h).float()
        return output
    


